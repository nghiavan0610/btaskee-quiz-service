// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailOrUsernameExists = `-- name: CheckEmailOrUsernameExists :one
SELECT 
    id,
    CASE 
        WHEN email = $1 THEN 'email'
        WHEN username = $2 THEN 'username'
    END as conflict_field
FROM users
WHERE email = $1 OR username = $2
LIMIT 1
`

type CheckEmailOrUsernameExistsParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

type CheckEmailOrUsernameExistsRow struct {
	ID            int64       `json:"id"`
	ConflictField interface{} `json:"conflict_field"`
}

func (q *Queries) CheckEmailOrUsernameExists(ctx context.Context, arg CheckEmailOrUsernameExistsParams) (CheckEmailOrUsernameExistsRow, error) {
	row := q.db.QueryRow(ctx, checkEmailOrUsernameExists, arg.Email, arg.Username)
	var i CheckEmailOrUsernameExistsRow
	err := row.Scan(&i.ID, &i.ConflictField)
	return i, err
}

const findEmailSignUp = `-- name: FindEmailSignUp :one
SELECT id, email
FROM users
WHERE email = $1
LIMIT 1
`

type FindEmailSignUpRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) FindEmailSignUp(ctx context.Context, email string) (FindEmailSignUpRow, error) {
	row := q.db.QueryRow(ctx, findEmailSignUp, email)
	var i FindEmailSignUpRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const findUsernameSignUp = `-- name: FindUsernameSignUp :one
SELECT id, username
FROM users
WHERE username = $1
LIMIT 1
`

type FindUsernameSignUpRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) FindUsernameSignUp(ctx context.Context, username string) (FindUsernameSignUpRow, error) {
	row := q.db.QueryRow(ctx, findUsernameSignUp, username)
	var i FindUsernameSignUpRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserByEmailIncludePassword = `-- name: GetUserByEmailIncludePassword :one
SELECT id, username, email, password, avatar_url, is_active, created_at, updated_at, last_login_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmailIncludePassword(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailIncludePassword, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.AvatarUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const registerAccount = `-- name: RegisterAccount :one
INSERT INTO users (
  username,
  email,
  password,
  is_active
) VALUES (
  $1, $2, $3, true
)
RETURNING id, username, email, is_active, created_at, updated_at, last_login_at
`

type RegisterAccountParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RegisterAccountRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       string             `json:"email"`
	IsActive    bool               `json:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	LastLoginAt pgtype.Timestamptz `json:"last_login_at"`
}

func (q *Queries) RegisterAccount(ctx context.Context, arg RegisterAccountParams) (RegisterAccountRow, error) {
	row := q.db.QueryRow(ctx, registerAccount, arg.Username, arg.Email, arg.Password)
	var i RegisterAccountRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}
