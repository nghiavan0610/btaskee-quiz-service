// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: question.sql

package sqlc

import (
	"context"
)

const countQuestionsByQuiz = `-- name: CountQuestionsByQuiz :one
SELECT COUNT(*) FROM questions WHERE quiz_id = $1
`

func (q *Queries) CountQuestionsByQuiz(ctx context.Context, quizID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countQuestionsByQuiz, quizID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (quiz_id, question, type, answers, index, time_limit)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, quiz_id, question, type, answers, time_limit, index, created_at, updated_at
`

type CreateQuestionParams struct {
	QuizID    int64         `json:"quiz_id"`
	Question  string        `json:"question"`
	Type      QuestionType  `json:"type"`
	Answers   []byte        `json:"answers"`
	Index     int32         `json:"index"`
	TimeLimit TimeLimitType `json:"time_limit"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.QuizID,
		arg.Question,
		arg.Type,
		arg.Answers,
		arg.Index,
		arg.TimeLimit,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.Type,
		&i.Answers,
		&i.TimeLimit,
		&i.Index,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions WHERE id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuestion, id)
	return err
}

const getCurrentQuestion = `-- name: GetCurrentQuestion :one
SELECT q.id, q.quiz_id, q.question, q.type, q.answers, q.time_limit, q.index, q.created_at, q.updated_at FROM questions q
JOIN quizzes qz ON q.quiz_id = qz.id
WHERE qz.id = $1 AND q.index = qz.current_question_index
`

func (q *Queries) GetCurrentQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, getCurrentQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.Type,
		&i.Answers,
		&i.TimeLimit,
		&i.Index,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMaxQuestionIndexByQuiz = `-- name: GetMaxQuestionIndexByQuiz :one
SELECT COALESCE(MAX(index), 0)::int FROM questions WHERE quiz_id = $1
`

func (q *Queries) GetMaxQuestionIndexByQuiz(ctx context.Context, quizID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getMaxQuestionIndexByQuiz, quizID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getQuestionByID = `-- name: GetQuestionByID :one
SELECT id, quiz_id, question, type, answers, time_limit, index, created_at, updated_at FROM questions WHERE id = $1
`

func (q *Queries) GetQuestionByID(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestionByID, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.Type,
		&i.Answers,
		&i.TimeLimit,
		&i.Index,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestionByQuizAndIndex = `-- name: GetQuestionByQuizAndIndex :one
SELECT id, quiz_id, question, type, answers, time_limit, index, created_at, updated_at FROM questions 
WHERE quiz_id = $1 AND index = $2
`

type GetQuestionByQuizAndIndexParams struct {
	QuizID int64 `json:"quiz_id"`
	Index  int32 `json:"index"`
}

func (q *Queries) GetQuestionByQuizAndIndex(ctx context.Context, arg GetQuestionByQuizAndIndexParams) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestionByQuizAndIndex, arg.QuizID, arg.Index)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.Type,
		&i.Answers,
		&i.TimeLimit,
		&i.Index,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestionListByQuiz = `-- name: GetQuestionListByQuiz :many
SELECT id, quiz_id, question, type, answers, time_limit, index, created_at, updated_at FROM questions 
WHERE quiz_id = $1 
ORDER BY index ASC
`

func (q *Queries) GetQuestionListByQuiz(ctx context.Context, quizID int64) ([]Question, error) {
	rows, err := q.db.Query(ctx, getQuestionListByQuiz, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.Question,
			&i.Type,
			&i.Answers,
			&i.TimeLimit,
			&i.Index,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions 
SET question = $2, type = $3, answers = $4, time_limit = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, quiz_id, question, type, answers, time_limit, index, created_at, updated_at
`

type UpdateQuestionParams struct {
	ID        int64         `json:"id"`
	Question  string        `json:"question"`
	Type      QuestionType  `json:"type"`
	Answers   []byte        `json:"answers"`
	TimeLimit TimeLimitType `json:"time_limit"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.ID,
		arg.Question,
		arg.Type,
		arg.Answers,
		arg.TimeLimit,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.Type,
		&i.Answers,
		&i.TimeLimit,
		&i.Index,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuestionIndex = `-- name: UpdateQuestionIndex :exec
UPDATE questions 
SET index = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateQuestionIndexParams struct {
	ID    int64 `json:"id"`
	Index int32 `json:"index"`
}

func (q *Queries) UpdateQuestionIndex(ctx context.Context, arg UpdateQuestionIndexParams) error {
	_, err := q.db.Exec(ctx, updateQuestionIndex, arg.ID, arg.Index)
	return err
}
