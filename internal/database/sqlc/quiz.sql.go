// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quiz.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countQuizListByOwner = `-- name: CountQuizListByOwner :one
SELECT COUNT(*) FROM quizzes
WHERE owner_id = $1
  AND ($2::text IS NULL OR (title ILIKE '%' || $2 || '%' OR description ILIKE '%' || $2 || '%'))
  AND ($3::quiz_visibility IS NULL OR visibility = $3)
`

type CountQuizListByOwnerParams struct {
	OwnerID    int64              `json:"owner_id"`
	Query      *string            `json:"query"`
	Visibility NullQuizVisibility `json:"visibility"`
}

func (q *Queries) CountQuizListByOwner(ctx context.Context, arg CountQuizListByOwnerParams) (int64, error) {
	row := q.db.QueryRow(ctx, countQuizListByOwner, arg.OwnerID, arg.Query, arg.Visibility)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quizzes (title, description, visibility, owner_id, max_participants)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, owner_id, visibility, slug, view_count, play_count, max_participants, current_question_index, total_questions, created_at, updated_at, published_at
`

type CreateQuizParams struct {
	Title           string         `json:"title"`
	Description     *string        `json:"description"`
	Visibility      QuizVisibility `json:"visibility"`
	OwnerID         int64          `json:"owner_id"`
	MaxParticipants *int32         `json:"max_participants"`
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, createQuiz,
		arg.Title,
		arg.Description,
		arg.Visibility,
		arg.OwnerID,
		arg.MaxParticipants,
	)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
		&i.Visibility,
		&i.Slug,
		&i.ViewCount,
		&i.PlayCount,
		&i.MaxParticipants,
		&i.CurrentQuestionIndex,
		&i.TotalQuestions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE FROM quizzes WHERE id = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuiz, id)
	return err
}

const getPublicQuizzes = `-- name: GetPublicQuizzes :many
SELECT 
    q.id, q.title, q.description, q.owner_id, q.visibility, q.slug, q.view_count, q.play_count, q.max_participants, q.current_question_index, q.total_questions, q.created_at, q.updated_at, q.published_at,
    u.id as owner_user_id,
    u.username as owner_username,
    u.email as owner_email,
    u.avatar_url as owner_avatar_url
FROM quizzes q
LEFT JOIN users u ON q.owner_id = u.id
WHERE q.visibility = 'published'
  AND ($1::text IS NULL OR (q.title ILIKE '%' || $1 || '%' OR q.description ILIKE '%' || $1 || '%'))
  AND (
    $2::bigint IS NULL OR 
    CASE $3::text
      WHEN 'name_asc' THEN q.title > $4::text OR (q.title = $4::text AND q.id > $2::bigint)
      WHEN 'name_desc' THEN q.title < $4::text OR (q.title = $4::text AND q.id > $2::bigint)
      WHEN 'time_newest' THEN q.created_at < $5::timestamptz OR (q.created_at = $5::timestamptz AND q.id > $2::bigint)
      WHEN 'time_oldest' THEN q.created_at > $5::timestamptz OR (q.created_at = $5::timestamptz AND q.id > $2::bigint)
      WHEN 'view_count' THEN q.view_count < $6::integer OR (q.view_count = $6::integer AND q.id > $2::bigint)
      WHEN 'play_count' THEN q.play_count < $7::integer OR (q.play_count = $7::integer AND q.id > $2::bigint)
      ELSE q.created_at < $5::timestamptz OR (q.created_at = $5::timestamptz AND q.id > $2::bigint)
    END
  )
ORDER BY 
  CASE $3::text
    WHEN 'name_asc' THEN q.title
  END ASC,
  CASE $3::text
    WHEN 'name_desc' THEN q.title
  END DESC,
  CASE $3::text
    WHEN 'time_newest' THEN q.created_at
  END DESC,
  CASE $3::text
    WHEN 'time_oldest' THEN q.created_at
  END ASC,
  CASE $3::text
    WHEN 'view_count' THEN q.view_count
  END DESC,
  CASE $3::text
    WHEN 'play_count' THEN q.play_count
  END DESC,
  CASE 
    WHEN $3::text IS NULL OR $3::text = '' THEN q.created_at
  END DESC,
  q.id ASC
LIMIT $8::integer
`

type GetPublicQuizzesParams struct {
	Query           *string            `json:"query"`
	CursorID        *int64             `json:"cursor_id"`
	SortBy          *string            `json:"sort_by"`
	CursorTitle     *string            `json:"cursor_title"`
	CursorCreatedAt pgtype.Timestamptz `json:"cursor_created_at"`
	CursorViewCount *int32             `json:"cursor_view_count"`
	CursorPlayCount *int32             `json:"cursor_play_count"`
	Limit           int32              `json:"limit"`
}

type GetPublicQuizzesRow struct {
	ID                   int64              `json:"id"`
	Title                string             `json:"title"`
	Description          *string            `json:"description"`
	OwnerID              int64              `json:"owner_id"`
	Visibility           QuizVisibility     `json:"visibility"`
	Slug                 *string            `json:"slug"`
	ViewCount            int32              `json:"view_count"`
	PlayCount            int32              `json:"play_count"`
	MaxParticipants      *int32             `json:"max_participants"`
	CurrentQuestionIndex int32              `json:"current_question_index"`
	TotalQuestions       *int32             `json:"total_questions"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	PublishedAt          pgtype.Timestamptz `json:"published_at"`
	OwnerUserID          *int64             `json:"owner_user_id"`
	OwnerUsername        *string            `json:"owner_username"`
	OwnerEmail           *string            `json:"owner_email"`
	OwnerAvatarUrl       *string            `json:"owner_avatar_url"`
}

func (q *Queries) GetPublicQuizzes(ctx context.Context, arg GetPublicQuizzesParams) ([]GetPublicQuizzesRow, error) {
	rows, err := q.db.Query(ctx, getPublicQuizzes,
		arg.Query,
		arg.CursorID,
		arg.SortBy,
		arg.CursorTitle,
		arg.CursorCreatedAt,
		arg.CursorViewCount,
		arg.CursorPlayCount,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPublicQuizzesRow{}
	for rows.Next() {
		var i GetPublicQuizzesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OwnerID,
			&i.Visibility,
			&i.Slug,
			&i.ViewCount,
			&i.PlayCount,
			&i.MaxParticipants,
			&i.CurrentQuestionIndex,
			&i.TotalQuestions,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.OwnerUserID,
			&i.OwnerUsername,
			&i.OwnerEmail,
			&i.OwnerAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizListByOwner = `-- name: GetQuizListByOwner :many
SELECT id, title, description, owner_id, visibility, slug, view_count, play_count, max_participants, current_question_index, total_questions, created_at, updated_at, published_at FROM quizzes 
WHERE owner_id = $1
  AND ($4::text IS NULL OR (title ILIKE '%' || $4 || '%' OR description ILIKE '%' || $4 || '%'))
  AND ($5::quiz_visibility IS NULL OR visibility = $5)
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetQuizListByOwnerParams struct {
	OwnerID    int64              `json:"owner_id"`
	Limit      int32              `json:"limit"`
	Offset     int32              `json:"offset"`
	Query      *string            `json:"query"`
	Visibility NullQuizVisibility `json:"visibility"`
}

func (q *Queries) GetQuizListByOwner(ctx context.Context, arg GetQuizListByOwnerParams) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, getQuizListByOwner,
		arg.OwnerID,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.Visibility,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quiz{}
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.OwnerID,
			&i.Visibility,
			&i.Slug,
			&i.ViewCount,
			&i.PlayCount,
			&i.MaxParticipants,
			&i.CurrentQuestionIndex,
			&i.TotalQuestions,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuizWithOwner = `-- name: GetQuizWithOwner :one
SELECT 
    q.id, q.title, q.description, q.owner_id, q.visibility, q.slug, q.view_count, q.play_count, q.max_participants, q.current_question_index, q.total_questions, q.created_at, q.updated_at, q.published_at,
    u.id as owner_user_id,
    u.username as owner_username,
    u.email as owner_email,
    u.avatar_url as owner_avatar_url
FROM quizzes q
LEFT JOIN users u ON q.owner_id = u.id
WHERE q.id = $1
`

type GetQuizWithOwnerRow struct {
	ID                   int64              `json:"id"`
	Title                string             `json:"title"`
	Description          *string            `json:"description"`
	OwnerID              int64              `json:"owner_id"`
	Visibility           QuizVisibility     `json:"visibility"`
	Slug                 *string            `json:"slug"`
	ViewCount            int32              `json:"view_count"`
	PlayCount            int32              `json:"play_count"`
	MaxParticipants      *int32             `json:"max_participants"`
	CurrentQuestionIndex int32              `json:"current_question_index"`
	TotalQuestions       *int32             `json:"total_questions"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	PublishedAt          pgtype.Timestamptz `json:"published_at"`
	OwnerUserID          *int64             `json:"owner_user_id"`
	OwnerUsername        *string            `json:"owner_username"`
	OwnerEmail           *string            `json:"owner_email"`
	OwnerAvatarUrl       *string            `json:"owner_avatar_url"`
}

func (q *Queries) GetQuizWithOwner(ctx context.Context, id int64) (GetQuizWithOwnerRow, error) {
	row := q.db.QueryRow(ctx, getQuizWithOwner, id)
	var i GetQuizWithOwnerRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
		&i.Visibility,
		&i.Slug,
		&i.ViewCount,
		&i.PlayCount,
		&i.MaxParticipants,
		&i.CurrentQuestionIndex,
		&i.TotalQuestions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.OwnerUserID,
		&i.OwnerUsername,
		&i.OwnerEmail,
		&i.OwnerAvatarUrl,
	)
	return i, err
}

const incrementQuizPlayCount = `-- name: IncrementQuizPlayCount :exec
UPDATE quizzes 
SET play_count = play_count + 1, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) IncrementQuizPlayCount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementQuizPlayCount, id)
	return err
}

const incrementQuizViewCount = `-- name: IncrementQuizViewCount :exec
UPDATE quizzes 
SET view_count = view_count + 1, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) IncrementQuizViewCount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementQuizViewCount, id)
	return err
}

const updateQuiz = `-- name: UpdateQuiz :one
UPDATE quizzes 
SET title = $2, description = $3, visibility = $4, max_participants = $5, published_at = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, owner_id, visibility, slug, view_count, play_count, max_participants, current_question_index, total_questions, created_at, updated_at, published_at
`

type UpdateQuizParams struct {
	ID              int64              `json:"id"`
	Title           string             `json:"title"`
	Description     *string            `json:"description"`
	Visibility      QuizVisibility     `json:"visibility"`
	MaxParticipants *int32             `json:"max_participants"`
	PublishedAt     pgtype.Timestamptz `json:"published_at"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quiz, error) {
	row := q.db.QueryRow(ctx, updateQuiz,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Visibility,
		arg.MaxParticipants,
		arg.PublishedAt,
	)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.OwnerID,
		&i.Visibility,
		&i.Slug,
		&i.ViewCount,
		&i.PlayCount,
		&i.MaxParticipants,
		&i.CurrentQuestionIndex,
		&i.TotalQuestions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const updateQuizTotalQuestions = `-- name: UpdateQuizTotalQuestions :exec
UPDATE quizzes 
SET total_questions = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateQuizTotalQuestionsParams struct {
	ID             int64  `json:"id"`
	TotalQuestions *int32 `json:"total_questions"`
}

func (q *Queries) UpdateQuizTotalQuestions(ctx context.Context, arg UpdateQuizTotalQuestionsParams) error {
	_, err := q.db.Exec(ctx, updateQuizTotalQuestions, arg.ID, arg.TotalQuestions)
	return err
}
