// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findValidateName = `-- name: FindValidateName :one
SELECT id, username
FROM users
WHERE username = $1
  AND ($2::bigint IS NULL OR id != $2)
LIMIT 1
`

type FindValidateNameParams struct {
	Username  string `json:"username"`
	ExcludeID *int64 `json:"exclude_id"`
}

type FindValidateNameRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) FindValidateName(ctx context.Context, arg FindValidateNameParams) (FindValidateNameRow, error) {
	row := q.db.QueryRow(ctx, findValidateName, arg.Username, arg.ExcludeID)
	var i FindValidateNameRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserDetail = `-- name: GetUserDetail :one
SELECT id, username, email, is_active, created_at, updated_at, last_login_at
FROM users
WHERE id = $1
`

type GetUserDetailRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       string             `json:"email"`
	IsActive    bool               `json:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	LastLoginAt pgtype.Timestamptz `json:"last_login_at"`
}

func (q *Queries) GetUserDetail(ctx context.Context, id int64) (GetUserDetailRow, error) {
	row := q.db.QueryRow(ctx, getUserDetail, id)
	var i GetUserDetailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET username = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, is_active, created_at, updated_at, last_login_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

type UpdateUserRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       string             `json:"email"`
	IsActive    bool               `json:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	LastLoginAt pgtype.Timestamptz `json:"last_login_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :one
UPDATE users 
SET last_login_at = NOW(), updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, is_active, created_at, updated_at, last_login_at
`

type UpdateUserLastLoginRow struct {
	ID          int64              `json:"id"`
	Username    string             `json:"username"`
	Email       string             `json:"email"`
	IsActive    bool               `json:"is_active"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	LastLoginAt pgtype.Timestamptz `json:"last_login_at"`
}

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) (UpdateUserLastLoginRow, error) {
	row := q.db.QueryRow(ctx, updateUserLastLogin, id)
	var i UpdateUserLastLoginRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}
